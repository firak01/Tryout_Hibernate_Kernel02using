<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">

<hibernate-configuration>

	<session-factory>
		<!-- Im Code wird die Konfiguration aber durch Java-Befehle erstellt und diese hier uebersteuert -->     
		<!--  Exkurs 20171103: Versuche über den nachfolgenden Namen eine SessionFactory zu erzeugen -->  
<!--        <property name="hibernate.session_factory_name">hibernate.session-factory.ServicePortal</property> -->
<!-- 		damit funktioniert es, aber auch ohne das Fragezeichen, ja funktioniert auch ohne diese Angabe<property name="hibernate.session_factory_name">tryout.zBasic.persistence.hibernate.HibernateSessionFactoryTomcatFactory</property> -->
       
		<!-- Echo all SQL to stdout -->
		<property name="show_sql">true</property>
		<property name="format_sql">true</property>

		<!-- <property name="dialect">org.hibernate.dialect.SQLiteDialect</property> -->
		<property name="dialect">basic.persistence.hibernate.SQLiteDialect</property>

		<!-- Database Connection settings -->
		<property name="connection.driver_class">org.sqlite.JDBC</property>
<!-- 	20171207: Es soll auf die reine Konfiguration verlassen werden, auch auf context.xml für JNDI ZUgriff
        <property name="connection.url">jdbc:sqlite:c:\\server\\SQLite\\TileHexMap03.sqlite</property> -->
        <!-- 20171209: EntiyManagerFactory scheint aber dies zu benötigten: 
                       Z.B. in DebugJpaSequenceTestMain002.... EntityManagerFactory emf = Persistence.createEntityManagerFactory(sSchemaName);
                       Darum in dem Tryout-Projekt Tryout.Hibernate.Kernel02usingZZZ eine eigenen hibernate.cfg.xml hinterlegt, in der folgende Zeile einkommentiert ist. -->
        <!-- <property name="connection.url">jdbc:sqlite:c:\\server\\SQLite\\DebugSequenceAssociation002Tester.sqlite</property> -->
        
 <!-- 20171209: EntiyManagerFactory scheint aber dies zu benötigten: 
                       Z.B. in DebugJpaQueryHexCell... EntityManagerFactory emf = Persistence.createEntityManagerFactory(sSchemaName);
                       Darum in dem Tryout-Projekt Tryout.Hibernate.Kernel02usingZZZ eine eigenen hibernate.cfg.xml hinterlegt, in der folgende Zeile einkommentiert ist. -->
        <property name="connection.url">jdbc:sqlite:c:\\server\\SQLite\\TileHexMap03.sqlite</property>
		<property name="connection.username"></property>
		<property name="connection.password"></property>

		<!-- Enable Hibernates automatic session context management -->
		<property name="current_session_context_class">thread</property>

		<!-- disable the second-level cache -->
		<property name="cache.provider_class">org.hibernate.cache.NoCacheProvider</property>

		<!-- drop and recreate database schema on startup -->
		<!-- FGL 20131124: Umgeändert auf create, erstellt damit automatisch die 
			Datenbank, ABER: keine Updates. Daher im Code (...main... -Klasse) die Konfiguration 
			"übersteuert" mit dem Parameter UPDATE 
			FGL 20170215: Das übersteuern klappt nicht, darum hier auskommentiert-->
<!-- 		<property name="hibernate.hbm2ddl.auto">create</property> -->

		<!-- 20171209: Die EntityManager Factory scheint das aber zu benötigen -->
		<property name="hibernate.hbm2ddl.auto">update</property>

		<!-- FGL: So werden die Klassen für das Mapping herangezogen, aber: Dabei 
			werden Annotations verwendet. -->
		<!-- <mapping class="tryout.hibernate.Shape"></mapping> <mapping class="tryout.hibernate.Rectangle"></mapping> 
			<mapping class="tryout.hibernate.Circle"></mapping> -->
		<!-- FGL 20131124: Darun unterscheidet sich dieses Beispiel von den vorherigen, 
			es wird einen Konigurationsdatei für das Mapping verwendet -->
		<!-- <mapping resource="tryout/hibernate/Person.hbm.xml"/> -->

		<!-- es dürfen hier nur Klassen genannt werden, die auch gefunden werden 
			<mapping class="tryout.hibernate.Person"/> <mapping class="tryout.hibernate.Employee"/> 
			<mapping class="tryout.hibernate.Owner"/> -->

		<!-- wg debugJPAQuery. Hier wird der Entiy Manager verwendet
		     EntityManager em = objContextHibernate.getEntityManager("TileHexMap03");
		     Darum alle Klassen hier auch Mappen -->
		<mapping class="use.thm.persistence.model.HexCell"></mapping>
		<mapping class="use.thm.persistence.model.Tile"></mapping>
	</session-factory>


</hibernate-configuration>